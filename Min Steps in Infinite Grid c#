 /* Problem : You are in an infinite 2D grid where you can move in any of the 8 directions
     (x,y) to 
    (x+1, y), 
    (x - 1, y), 
    (x, y+1), 
    (x, y-1), 
    (x-1, y-1), 
    (x+1,y+1), 
    (x-1,y+1), 
    (x+1,y-1) 
     Input : Given two integer arrays A and B, where A[i] is x coordinate and B[i] is y coordinate of ith point respectively.
     A = [0, 1, 1]
     B = [0, 1, 2]
     Output : 2
     Output Format : Return an Integer, i.e minimum number of steps.
       */


    class Infinite_grid
    {
        public int coverPoints(List<int> A, List<int> B)
        {

            int result = 0, number1, number2, number;
            for (int i = 0; i < A.Count-1; i++ )
            { 
                number1 = Math.Abs(A[i] - A[i + 1]);
                number2 = Math.Abs(B[i] - B[i+1]);
                if (number1 > number2)
                {
                    number = number1;
                }
                else number = number2;
                result += number;
            }
           
            return result;
        }
    }
}
