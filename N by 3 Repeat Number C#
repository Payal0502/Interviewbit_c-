  /*
     * N/3 Repeat Number
     * Youâ€™re given a read only array of n integers. Find out if any integer occurs more than n/3 times in the array in linear time and constant additional space.

If so, return the integer. If not, return -1.

If there are multiple solutions, return any one.

Example :

Input : [1 2 3 1 1]
Output : 1 
1 occurs 3 times which is more than 5/3 times.
     */
    class n_by_3_in_o_n
    {
        public int appearsNBy3(List<int> a)
        {
            int n = a.Count;
            int c1 = 0, c2 = 0;
            int first = int.MaxValue;
            int second = int.MaxValue;
            for (int i = 0; i < n; i++)
            {
                if (first == a[i])
                {
                    c1++;
                    first = a[i];
                }
                else if (second == a[i])
                {
                    c2++;
                    second = a[i];
                }
                else if (c1 == 0)
                {
                    c1++;
                    first = a[i];
                }
                else if (c2 == 0)
                {
                    c2++;
                    second = a[i];
                }
                else
                {
                    c1--; c2--;
                }
            }
            c1 = 0; c2 = 0;
            for (int i = 0; i < n; i++)
            {
                if (first == a[i])
                {
                    c1++;
                }
                else if (second == a[i])
                {
                    c2++;
                }
            }
            if (c1 > n / 3)
            {
                return first;
            }
            else if (c2 > n / 3)
            {
                return second;
            }
            return -1;
        }
    }
}
